---
title: "Tokenizing Political Language to Determine Bias"
subtitle: "EM675 Final Presentation"
author: "Keenan Smith"
date: "26 Apr 2023"
title-slide-attributes: 
  data-background-image: ./images/khashayar-kouchpeydeh-chess-unsplash.jpg
  data-background-size: contain
  data-background-color: black
bibliography: references.bib
format:
  revealjs:
    slide-number: true
    show-slide-number: all
    theme: serif
    logo: images/ncstate-type-2x2-red.png
    footer: "[Capstone_Github_SmithK](https://github.com/keenan-smith-data/political-sentiment)"
    width: 1920
    height: 1080
    embed-resources: true
    mainfont: Roboto Slab
    
---

# Overview

:::: {.columns}
::: {.column width="50%"}

-   Introduction
    -   Research Question
    -   Political Ideology
    -   Natural Language Processing
-   Methods
    -   The Data
    -   Programming Language
    -   Data Collection

:::

::: {.column width="50%"}

-   Results
    -   EDA
    -   Model Results
-   Further Work
-   Questions

:::
::::

## Research Question

A **Data Science** Project that examines the question *"Does Political Speech indicate classical right-left political bias?"*

:::: {.columns}
::: {.column width="55%"}

- The Corpus consists of Ideologically Identified Sources
  - Primarily U.S. Think Tanks
    - Specifically Chosen for Bias
  - Data are Scraped from the Web
  - These Data are in English
- Classical Machine Learning Techniques are used for Classification
  - Transformers (The tech behind GPT) are goals for the future

:::

::: {.column width="45%"}

**Why?**

- We live in a politically charged and active time in the United States
- I like history, politics, and Natural Language
- How we communicate is meaningful and important
- The US Supreme Court uses Originalism and Textualism in their decisions

:::
::::

::: {.notes}
My interests are all the things you are not supposed to talk about at Thanksgiving
Transformers are the current highest form for NLP modeling but require much more computing power
:::

## Political Ideology

"Ideologies have for different individuals, different degrees of appeal. A matter that depends upon the individuals needs and the degree to which these needs are being satisfied or frustrated." [@adorno]

- The study of political ideology is vast and complex [@feldman_2013]
  - Construction of political parties are equally complicated and vast [@mayer_party; @mudge_parties]
- This project chooses intentionally to focus on a wide corpus of data from left and right
- Clustering of the Sources used shows this is a complicated topic
  - Further work should focus on this diversity and complexity

::: {.notes}
Speaker notes go here.
:::

## Natural Language Processing

"the application of computer science to the **analysis, synthesis, and comprehension"** of written and spoken language" (Oxford Dictionary)

:::: {.columns}
::: {.column width="55%"}

- Mixing Data Science and how we use Natural Language
- NLP use linguistic tools to build *features* out of language
- These features are then transformed into mathematical vectors in order to model
  - Tokens (units of language)
    - Characters, Words, n-grams, Sentences, Paragraphs
  - Term Frequency
  - Term Frequency Inverse Document Frequency (Tf-idf)
  - Embeddings (not used in this project)
  
:::

::: {.column width="45%"}
![Credit: Xoriant](images/nlp_picture.png)
:::
::::

- There are many other applications such as sentiment analysis and topic modeling to name a few

::: {.notes}
Speaker notes go here.
:::

# Methods

::: {.notes}
This needs some tables
:::

## Sources

```{r}
#| echo: false
source_table <- tidytable::fread(here::here("data", "sources", "source_table.csv"))

source_table |>
  tidytable::rename("Article Source" = art_source,
                    "Short Source" = short_source,
                    "Source Bias" = source_bias) |>
  kableExtra::kbl(caption = "Table of Sources") |>
  kableExtra::kable_classic(font_size = 10, latex_options = "HOLD_position")
```

## Data Source in Length of Text {.scrollable}

```{r}
#| echo: false

bias_count <- tidytable::fread(here::here("content", "project", "sample_data", "bias_count_filtered.csv"))
bias_count |>
  tidytable::rename("Source Bias" = source_bias,
                    "Total Characters" = total,
                    "# of Articles" = num,
                    "Minimum" = min,
                    "Maximum" = max,
                    "Average #" = mean,
                    "Median" = median,
                    "Interquartile Range" = iqr,
                    "Standard Deviation" = sd) |>
  kableExtra::kbl(caption = "Character Analysis") |>
  kableExtra::kable_classic(font_size = 6, latex_options = "HOLD_position")
```

```{r}
source_count <- tidytable::fread(here::here("content", "project", "sample_data", "source_count_filtered.csv"))
kableExtra::kbl(source_count) |>
  kableExtra::kable_styling(bootstrap_options = "striped", font_size = 28)
```

## The Data

:::: {.columns}
::: {.column width="65%"}
- Bias
  - Selected Data Sources on Availability of Data
  - Trimmed as much as reasonably practical from Large Sources
  - Stopwords chosen based on EDA and Early Models
- Data Integrity
  - Data Scraped Straight Into SQL Database
  - Strict Type Adherence
  - Uniqueness of Links Checked through Final Corpus selection
  - No Text, No Input into DB

:::

::: {.column width="35%"}

- Metadata
  - Article Link `art_link` 
    - VARCHAR
  - Article Date `art_date` 
    - DATE
  - Article Author(s) `art_author` 
    - VARCHAR
  - Article Source `art_source` 
    - VARCHAR
  - Article Bias `art_bias` 
    - VARCHAR
- Data
  - Text 
    - VARCHAR

:::
::::

## Data Sample {.scrollable}

```{r}
sample_text <- tidytable::fread(here::here("content", "project", "sample_data", "sample_corpus.csv"))
kableExtra::kbl(sample_text) |>
  kableExtra::kable_styling(bootstrap_options = "striped", font_size = 16)
```

::: {.notes}
Table of Sample Data
:::

## Process

![Technical Flow Chat](Flow Chart.drawio.png)

::: {.notes}
Speaker notes go here.
:::

## Corpus Cleaning

- The Corpus is tokenized using the Quanteda framework of libraries
  = Bigrams were chosen due to their ability to contain more lexical scope information
  - Symbols, Numbers, and common Stopwords were excluded from the Corpus
  - Specific Stopwords were chosen via EDA and early LASSO Classification
    - Many of these are leftover web artifacts from scraping being an imperfect science
    - Others are common terms used in articles ("originally_published", "see_also")
    - Lastly, proper nouns specific to certain think tanks (Organization Names, Sponsors)

::: {.notes}
Stopwords were removed to the best of my ability. Many times these were obvious, but most of the time they were pulled out after others were removed.
Lastly, certain stopwords were not removed until initial modelling was completed as they weighed heavily towards identifying bias. This process is imperfect.
Early on, the corpus had to be retokenized and saved to disk which took 10-20 mins per cycle.  
:::

## Data Vectorization

- Corpus is Large consisting of 148,703 documents

- Two Data Vectorization Techniques
  - Term Frequency - Inverse Document Frequency (tf-idf)
    - 4000 predictors chosen based on Frequency, vectorized using TF-IDF
  - Latent Semantic Analysis
    - 10,000 predictors dimensionally reduced to 200 using Singular Value Decomposition

- The Data are split 75/25 stratifying on bias
  - 111,526 documents in the training set
  - 37,177 documents in the testing set
  - Random Seed state is set to 2023 in every model for reproducibility

## Models {.scrollable}

Models were chosen for their use in Text Classification Best Practices and computational efficiency

- Naive Bayes Classifier
  - A simple classifier that applies the Bayes Thereom to predictors
  - Assume within *kth* class, the *p* predictors are independent (ISLR. 2018)
  - $Pr(Y = k | X = x) = \frac{\pi_i * f_k(x) = f_{k1}(x_1) * \dots * f_{kp}}{\sum^K_{k=1} \pi_l * f_{l1}(x_1) * \dots * f_{lp}}$
  - Generally good in Spam Detection situation where words appear less in one than the other

- LASSO Logistic Regression
  - Regularized Linear Regression that minimizes $\lambda$ value 
  - In Statistics/Linear Algebra, the LASSO uses an $\ell_1$ penalty
  - Performs Feature Selection on the Linear Model
  - With close ties to Linear Regression, predictor effects are easier to understand

## Model Optimization

Cross Validation
- 10 Fold Cross Validation is Utilized to Optimize Models
- Parameters are training based on best practices

::: {.notes}
Speaker notes go here.
:::

# Results

```{r}
library(ggplot2)
library(plotly)
library(scales)

corpus_length <- tidytable::fread(here::here("content", "project", "sample_data", "corpus_length_filtered.csv"))

histogram_bias <- ggplot(corpus_length, aes(x = length_text, fill = source_bias, color = source_bias)) +
  geom_histogram(alpha = 0.5, position = "dodge") +
  scale_x_log10(labels =label_number(scale_cut = cut_short_scale())) +
  scale_color_manual(values = c("left-wing" = "blue",
                                "right-wing" = "red")) +
  scale_fill_manual(values = c("left-wing" = "blue",
                                "right-wing" = "red")) +
  labs(x = "Length Text",
       y = "Number of Characters (log scale)") +           # Make background transparent
  theme(rect = element_rect(fill = "transparent"))

histogram_source <- ggplot(corpus_length, aes(x = length_text, fill = short_source, color = short_source)) +
  geom_histogram(alpha = 0.5, position = "identity") +
  scale_x_log10(labels = label_number(scale_cut = cut_short_scale())) +
  labs(x = "Length Text",
       y = "Number of Characters (log scale)") +
  theme_classic() +           # Make background transparent
  theme(rect = element_rect(fill = "transparent"))
```

## Bias Histogram

```{r}
#| fig-height: 10
#| fig-width: 16
#| fig-align: right
ggplotly(histogram_bias)
```

::: {.notes}
Speaker notes go here.
:::

## Source Histogram

```{r}
#| fig-height: 10
#| fig-width: 16
#| fig-align: center
ggplotly(histogram_source)
```

## Left-Wing Bigrams

```{r}
library(wordcloud2)
tstat_bigram_freq <- tidytable::fread(here::here("content", "project", "sample_data", "tstat_freq_bigram.csv"))

left_bigram_freq <- subset(tstat_bigram_freq, group == "left-wing")
right_bigram_freq <- subset(tstat_bigram_freq, group == "right-wing")
```

```{r}
#| fig-height: 10
#| fig-width: 16
#| fig-align: center
wordcloud2(left_bigram_freq, size = 1.5, color = pals::ocean.thermal(100), minRotation = pi/6, maxRotation = pi/6, rotateRatio = 1, backgroundColor = "transparent")
```

## Right-Wing Bigrams

```{r}
#| fig-height: 10
#| fig-width: 16
#| fig-align: center
wordcloud2(right_bigram_freq, size = 1.5, color = pals::ocean.oxy(100), minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1, backgroundColor = "transparent")
```

## Model Results  {.scrollable}

::: {.panel-tabset}

### Tab A

:::: {.columns}
::: {.column width="55%"}

- 3000 of the Most Frequent Bigrams Selected
  - Bigrams contain more information than Word Tokens
  - Early Modeling showed Bigrams had better results
- Regularized LASSO Regression Used so far

```{.r}
lasso_test_metrics <- tidytable::fread("lasso_test_metrics.csv")
kableExtra::kbl(lasso_test_metrics) |>
  kableExtra::kable_styling(bootstrap_options = "striped", font_size = 28)
```

:::

::: {.column width="45%"}

![](../modeling/plots/variable_importance_plot_lasso_tfidf.png)

:::
::::

### Tab B (ROC Curve)

![](../modeling/plots/roc_curve_lasso_tfidf.png){width=50%}

:::

::: {.notes}
Speaker notes go here.
:::

## Conclusion & Remarks

- Results appear to be promising
  - An Accuracy of 82% and ROC AUC of 90% is excellent for LASSO Regresssion
  - Results are Relatively Easy to Interpret
- The Dataset is Large but not Unwieldy for others to Utilize
- The R Packages Utilized are Manageable and Easy to Learn
- Scraping is Easy to Replicate but Hard to find good sources

## References

::: {#refs}
:::

# Questions

## Attributions

- Cover Photo by [Khashayar Kouchpeydeh](https://unsplash.com/pt-br/@kouchpeydeh?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/photos/QR_TFiIX8hM?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
