---
title: "Web Text Test Scraping"
author: "Keenan Smith"
format: html
---

```{r}
#| label: Library Initiation
here::i_am("content/webscrape/web_scraping_testing.qmd")
suppressMessages(source(here::here("R", "viable_links.R")))

library(foreach)
library(progressr)
library(tidytable)
library(rvest)

n.cores <- parallel::detectCores() - 1
my.cluster <- parallel::makeCluster(
  n.cores,
  type = "PSOCK"
)

doParallel::registerDoParallel(cl = my.cluster)
```

# Sampling Function

```{r}
sample_helper <- function(df) {
  df |>
    slice_sample(n = 10, .by = url_type)
}
```


# Scrape Helper Functions

```{r}
element_pull <- function(e.html, css.tag) {
  e.html |>
    rvest::html_elements(css = css.tag) |>
    rvest::html_text2()
}

text_pull <- function(s.html, text.css = NA) {
  final.data <- s.html |>
    rvest::html_element(css = text.css) |>
    rvest::html_elements("p") |>
    rvest::html_text2() |>
    tidytable::na_if("")
  if (all(is.na(final.data))) {
    final.data <- s.html |>
      rvest::html_element(css = text.css) |>
      rvest::html_elements("div") |>
      rvest::html_text2() |>
      tidytable::na_if("")
  } 
  final.data <- final.data |>
    tidytable::as_tidytable() |>
    tidytable::drop_na(x)
  return(final.data)
}

date_pull <- function(s.html, date.css) {
  date.text <- element_pull(e.html = s.html, css.tag = date.css)
  date.text <- date.text[1]
  art_date <- lubridate::mdy(date.text)
  return(art_date)
}

author_pull <- function(s.html, author.css, art.source) {
  if (length(author.css) > 1) {
    art.authors <- tidytable::map_chr(.x = author.css, element_pull, e.html = s.html)
    art_author <- paste(art.authors, collapse = ",")
  } else if (length(author.css)  == 1) {
    art.author <- element_pull(s.html, author.css)
    art_author <- paste(art.author, collapse = ", ")
  } else {
    art_author <- art.source
  }
  return(art_author)
}

topic_pull <- function(s.html, topic.css = NA) {
  if (is.na(topic.css)) {
    art_topic <- NA
  } else {
  art.topic <- element_pull(s.html, topic.css)
  if (length(art.topic) > 1) {
    art_topic <- paste(art.topic, collapse = ", ")
  } else if (length(art.topic) == 1) {
    art_topic <- art.topic
  } else {
    art_topic <- NA
  }
  }
  return(art_topic)
}
```

# Main Scraper Function

```{r}
article_pull_df <- function(df) {
  hyperlink <- df$url[[1]]
  title.css.tag <- df$css_title[[1]]
  text.css.tag <- df$css_text[[1]]
  date.css.tag <- df$css_date[[1]]
  author.css.tags <- df$css_author[[1]]
  art.source <- df$art_source[[1]]
  topic.css.tags <- df$css_topics[[1]]
  rm(df)
  
  source.html <- xml2::read_html(hyperlink)
  art_title <- element_pull(e.html = source.html,
                            css.tag = title.css.tag)
  art_text <- text_pull(s.html = source.html,
                        text.css = text.css.tag)
  art_date <- date_pull(s.html = source.html,
                        date.css = date.css.tag)
  art_author <- author_pull(s.html = source.html,
                            author.css = author.css.tags,
                            art.source = art.source)
  art_topic <- topic_pull(s.html = source.html,
                          topic.css = topic.css.tags)
  final.data <- art_text |>
    tidytable::rename(text = x) |>
    tidytable::mutate(
      art_link = hyperlink,
      art_title = art_title,
      art_author = art_author,
      art_date = art_date,
      art_topic = art_topic,
      art_source = art.source
    )
  return(final.data)
}
```


```{r}
text_coll_foreach <- function(df) {
  p <- progressr::progressor(along = df$url)
  final_data <- foreach::foreach(i = seq_along(df$url), .combine = rbind) %do% {
    p()
    article_pull_df(df[i])
  }
  return(final_data)
}
```

```{r}
filtered_aei$css_title <- ".entry-title"
filtered_aei$css_date <- "p.date"
filtered_aei$css_topics <- ".p-3"
filtered_aei$css_author <- "p.author"
filtered_aei$css_text <- ".entry-content"
```

```{r}


#| label: Sample Test Links
aei_sample <- sample_helper(filtered_aei)
am_sample <- sample_helper(filtered_am)
cap_sample <- sample_helper(filtered_cap)
cato_sample <- sample_helper(filtered_cato)
cbpp_sample <- sample_helper(filtered_cbpp)
comf_sample <- sample_helper(filtered_comf)
disc_sample <- sample_helper(filtered_disc)
epi_sample <- sample_helper(filtered_epi)

gutt_sample <- sample_helper(filtered_gutt)
heritage_sample <- sample_helper(filtered_heritage)
hrw_sample <- sample_helper(filtered_hrw)
mani_sample <- sample_helper(filtered_mani)
merc_sample <- sample_helper(filtered_merc)
osf_sample <- sample_helper(filtered_osf)
tnat_sample <- sample_helper(filtered_tnat)
urban_sample <- sample_helper(filtered_urban)
```

```{r}
# progressr::handlers(global = TRUE)
handlers("cli")
foreach_test <- text_coll_foreach(aei_sample)
```

<https://stackoverflow.com/questions/29402528/append-data-frames-together-in-a-for-loop>
Absolute Legend of Help for R ways of doing loops

```{r}
#| label: Testing Webscraping Loops
#| eval: false

j_wrong <- list()
h_com_wrong <- list()
h_rep_wrong <- list()

for (i in seq_along(j_test_wrong)) {
  j_test_df_wrong <- j_pull_try(j_test_wrong[i])
  j_test_df_wrong$i <- i
  j_wrong[[i]] <- j_test_df_wrong
  
  h_com_test_df_wrong <- h_com_pull_try(h_com_test_wrong[i])
  h_com_test_df_wrong$i <- i
  h_com_wrong[[i]] <- h_com_test_df_wrong
  
  h_rep_test_df_wrong <- h_rep_pull_try(h_rep_test_wrong[i])
  h_rep_test_df_wrong$i <- i
  h_rep_wrong[[i]] <- h_rep_test_df_wrong
}

j_text_wrong <- bind_rows(j_wrong)
h_com_text_wrong <- bind_rows(h_com_wrong)
h_rep_text_wrong <- bind_rows(h_rep_wrong)
```

