---
title: "Web Text Test Scraping"
author: "Keenan Smith"
format: html
---

```{r}
#| label: Library Initiation
here::i_am("content/webscrape/web_scraping_testing.qmd")
suppressMessages(source(here::here("R", "viable_links_original.R")))
source(here::here("R", "scraping_helpers.R"))
source(here::here("R", "article_pull_html.R"))
source(here::here("R", "article_pull_js.R"))


library(tidytable)
library(rvest)
```

```{r}
#| label: Connecting the DB
pol_sent_db <- dbConnect(duckdb::duckdb(), dbdir = here("data","political-sentiment.duckdb"))
```

```{r}
dbListTables(pol_sent_db)
```


```{r}
create_art_table <- function(tbl_name, con) {
  glue::glue_sql("
                 CREATE TABLE {tbl_name} (
                 art_link VARCHAR,
                 art_date DATE,
                 art_author VARCHAR,
                 art_title VARCHAR,
                 art_source VARCHAR,
                 full_text VARCHAR,
                 pull_index INTEGER
                 )",
                 .con = con
  )
}

insert_into_art_table <- function(df, tbl_name, con) {
  glue::glue_sql("
                 INSERT INTO {tbl_name} (art_link, art_date, art_author, art_title, art_source, full_text, pull_index)
                 VALUES ({df$art_link}, {df$art_date}, {df$art_author}, {df$art_title}, {df$art_source}, {df$full_text}, {df$pull_index}
                 ",
                 .con = con)
}
```

# Sampling Function

```{r}
sample_helper <- function(df) {
  df |>
    tidytable::slice_sample(n = 10, .by = url_type)
}
```

# Creating Testing Samples

```{r}
#| label: Sample Test Links
sample_aei <- sample_helper(filtered_aei)
sample_am <- sample_helper(filtered_am)
sample_cap <- sample_helper(filtered_cap)
sample_cato <- sample_helper(filtered_cato)
sample_cbpp <- sample_helper(filtered_cbpp)
sample_comf <- sample_helper(filtered_comf)
sample_disc <- sample_helper(filtered_disc)
sample_epi <- sample_helper(filtered_epi)
sample_epic <- sample_helper(filtered_epic)
sample_gutt <- sample_helper(filtered_gutt)
sample_heritage <- sample_helper(filtered_heritage)
sample_hrw <- sample_helper(filtered_hrw)
sample_mani <- sample_helper(filtered_mani)
sample_merc <- sample_helper(filtered_merc)
sample_osf <- sample_helper(filtered_osf)
sample_tnat <- sample_helper(filtered_tnat)
sample_urban <- sample_helper(filtered_urban)
```

# RSelenium Testing

```{r}
library(RSelenium)

driver <- rsDriver(browser = "firefox", chromever = NULL, verbose = FALSE)

remote_driver <- driver[["client"]]
```

# Foreach Looping Article Pull

```{r}
text_coll_foreach <- function(df) {
  p <- progressr::progressor(along = df$url)
  final_data <- foreach::foreach(i = seq_along(df$url), .combine = rbind, .errorhandling = "remove") %do% {
    p()
    article_pull_html(df[i])
  }
  return(final_data)
}

text_coll_foreach_js <- function(df, remDr) {
  p <- progressr::progressor(along = df$url)
  final_data <- foreach::foreach(i = seq_along(df$url), .combine = rbind, .errorhandling = "remove") %do% {
    p()
    article_pull_js(df[i], remDr) }
  return(final_data)
  }

```

# Opening Sample Links in Browser

```{r}
purrr::walk(sample_urban$url, browseURL)
```

# Testing Individual Articles

```{r}
test <- article_pull_html(sample_urban[1])
```

```{r}
test
```

# Testing Loops

```{r}
handlers("cli")
test_foreach <- text_coll_foreach(sample_urban)

test_foreach_js <-text_coll_foreach_js(sample_comf, remote_driver)
```

# Shutting Down Selenium Server

```{r}
remote_driver$close()
# stop the selenium server
driver[["server"]]$stop()
```

# Archive Adding CSS Tags to Dataframes

```{r}
#| eval: false
filtered_aei$css_title <- ".entry-title"
filtered_aei$css_date <- "p.date"
filtered_aei$css_topics <- ".p-3"
filtered_aei$css_author <- "p.author"
filtered_aei$css_text <- ".entry-content"
```

```{r}
#| eval: false
sample_cap$css_text <- '[class="wysiwyg -xw:4 -mx:a"]'
sample_cap$css_title <- ".header2-title"
sample_cap$css_date <- '[class="-t:9 -tt:u -c:d2t"]'
sample_cap$css_author <- '[class="authors1-list -as:2 -t:10"]'
sample_cap$css_topics <- '[class="-c:a5t term_link_listing"]'
```

```{r}
#| eval: false
sample_cato <- sample_cato |>
  mutate(css_text = case_when(
    url_type == "commentary" ~ ".fs-lg",
    url_type == "blog" ~ ".fs-lg"
  ),
  css_title = case_when(
    url_type == "commentary" ~ ".article-title",
    url_type == "blog" ~ ".h2"
  ),
  css_date = case_when(
    url_type == "commentary" ~ '.meta',
    url_type == "blog" ~ ".date-time__date"
  ),
  css_author = case_when(
    url_type == "commentary" ~ ".mb-2",
    url_type == "blog" ~ ".me-4"
  ),
  css_topics = case_when(
    url_type == "commentary" ~ NA,
    url_type == "blog" ~ ".content-reference-link"
  ))
```

```{r}
#| eval: false
sample_cbpp <- sample_cbpp |>
  mutate(css_text = case_when(
    url_type == "blog" ~ '[class="block block-layout-builder block-field-blocknodeblogbody"]',
    url_type == "research" ~ '[class="block block-layout-builder block-field-blocknoderich-contentbody"]',
    url_type == "press/statements" ~ '[class="block block-layout-builder block-field-blocknoderich-contentbody"]',
    url_type == "press/press-releases" ~ '[class="block block-layout-builder block-field-blocknodepress-releasebody"]'
  ),
  css_title = case_when(
    url_type == "blog" ~ '[class="block block-cbpp-core block-cbpp-formatted-title"]',
    url_type == "research" ~ '[class="block block-cbpp-core block-cbpp-formatted-title"]',
    url_type == "press/statements" ~ '[class="block block-cbpp-core block-cbpp-formatted-title"]',
    url_type == "press/press-releases" ~ '[class="block block-cbpp-core block-cbpp-formatted-title"]'
  ),
  css_date = case_when(
    url_type == "blog" ~ '.datetime',
    url_type == "research" ~ ".datetime",
    url_type == "press/statements" ~ '[class="field field--name-field-statement-note field--type-text field--label-hidden field__item"]',
    url_type == "press/press-releases" ~ ".datetime"
  ),
  css_author = case_when(
    url_type == "blog" ~ '[class="field field--name-field-display-title field--type-string field--label-hidden field__item"]',
    url_type == "research" ~ ".rich-content-author",
    url_type == "press/statements" ~ ".rich-content-author",
    url_type == "press/press-releases" ~ ".node__title"
  ),
  css_topics = case_when(
    url_type == "blog" ~ '[class="field field--name-field-topics field--type-entity-reference field--label-inline field__items"]',
    url_type == "research" ~ '[class="field field--name-field-topics field--type-entity-reference field--label-above field__items"]',
    url_type == "press/statements" ~ '[class="field field--name-field-topics field--type-entity-reference field--label-above field__items"]',
    url_type == "press/press-releases" ~ '[class="field field--name-field-topics field--type-entity-reference field--label-above field__items"]'
  ))
```

```{r}
#| eval: false
sample_comf <- sample_comf |>
  mutate(css_text = case_when(
    url_type == "publications" ~ '.article-body__content',
    url_type == "blog" ~ ".article-body__content"
  ),
  css_title = case_when(
    url_type == "publications" ~ ".publication-hero__title",
    url_type == "blog" ~ ".publication-hero__title"
  ),
  css_date = case_when(
    url_type == "publications" ~ '[datetime]',
    url_type == "blog" ~ "[datetime]"
  ),
  css_author = case_when(
    url_type == "publications" ~ ".authors__links",
    url_type == "blog" ~ ".experts-siderail__name"
  ),
  css_topics = case_when(
    url_type == "publications" ~ ".publication-details__topics",
    url_type == "blog" ~ ".publication-details__topics"
  ))
```

```{r}
#| eval: false
sample_disc$css_text <- ".article-center"
sample_disc$css_title <- ".article-title"
sample_disc$css_date <- ".article-date"
sample_disc$css_author <- ".article-author"
sample_disc$css_topics <- ".article-categories"
```

```{r}
#| eval: false
sample_epi$css_text <- ".blog-the_content"
sample_epi$css_title <- "h2"
sample_epi$css_date <- ".blog-byline"
sample_epi$css_author <- ".loop-author"
sample_epi$css_topics <- ".blog-tags"
```

```{r}
#| eval: false
sample_gutt$css_text <- ".c-content"
sample_gutt$css_title <- ".c-page-title--article-title"
sample_gutt$css_date <- ".c-metadata-tag--solid-black"
sample_gutt$css_author <- ".fn"
sample_gutt$css_topics <- ".field__item"
```

```{r}
#| eval: false
sample_heritage <- sample_heritage |>
  mutate(css_text = case_when(
    url_type == "commentary" ~ '.article__body-copy',
    url_type == "report" ~ ".article__body-copy"
  ),
  css_title = case_when(
    url_type == "commentary" ~ ".headline",
    url_type == "report" ~ ".article-headline"
  ),
  css_date = case_when(
    url_type == "commentary" ~ '.article-general-info',
    url_type == "report" ~ ".article-general-info"
  ),
  css_author = case_when(
    url_type == "commentary" ~ ".author-card__name",
    url_type == "report" ~ ".contributors-list__contributor-name"
  ),
  css_topics = case_when(
    url_type == "commentary" ~ ".article__eyebrow",
    url_type == "report" ~ ".article__eyebrow"
  ))
```

```{r}
#| eval: false
sample_hrw <- sample_hrw |>
  mutate(css_text = case_when(
    url_type == "report" ~ '[class="rich-text mx-auto"]',
    url_type == "world-report" ~ '[class="rich-text mx-auto"]',
    url_type == "news" ~ '.article-body'
  ),
  css_title = case_when(
    url_type == "report" ~ '.report-header__title',
    url_type == "world-report" ~ '.chapter-header__title',
    url_type == "news" ~ '.news-header__main'
  ),
  css_date = case_when(
    url_type == "report" ~ '.report-header__dateline-date',
    url_type == "world-report" ~ '.chapter-header__subtitle',
    url_type == "news" ~ '.news-header__dateline-date'
  ),
  css_author = case_when(
    url_type == "report" ~ '.byline__name',
    url_type == "world-report" ~ '.byline__name',
    url_type == "news" ~ '.byline__name'
  ),
  css_topics = case_when(
    url_type == "report" ~ '.tag-block',
    url_type == "world-report" ~ '.toc-simple__item',
    url_type == "news" ~ '.tag-block'
  ))
```

```{r}
#| eval: false
sample_merc$css_text <- '.coh-ce-cpt_text-ec73cf93'
sample_merc$css_title <- "h1.coh-heading"
sample_merc$css_date <- '[datetime]'
sample_merc$css_author <- '.coh-style-byline'
sample_merc$css_topics <- '[data-item="category"]'
```

```{r}
#| eval: false
sample_urban$css_text <- '[data-block-plugin-id="urban-blocks-body-or-summary"]'
sample_urban$css_title <- '[element="h1"]'
sample_urban$css_date <- '.date'
sample_urban$css_author <- '.mb-2'
sample_urban$css_topics <- '[class="inline-block mr-4 mb-4"]'
```
