---
title: "Link Preparation"
author: "Keenan Smith"
---

```{r}
here::i_am("content/webscrape/link_preparation.qmd")
library(here)
library(DBI)
library(duckdb)
library(tidytable)
```

# Connecting to DuckDB

```{r}
pol_sent_db <- dbConnect(duckdb::duckdb(), dbdir = here("data","political-sentiment.duckdb"))
```

# Loading Lazy DB for dbplyr

```{r}
sitemaps <- dplyr::tbl(pol_sent_db, "sitemap_data")
linkchecker <- dplyr::tbl(pol_sent_db, "linkchecker_data")
source_table <- dplyr::tbl(pol_sent_db, "source_table")
```

# Function Block for Scraping

```{r}
# Function Block for Obtaining Viable Links
sitemap_viable_links <- function(df,
                                 short.source = NULL,
                                 art.source = NULL,
                                 url.filter,
                                 exclude = FALSE) {
  # Defining OR statement here since DBplyr doesn't like it
  url.filter <- stringr::str_c(stringr::regex("\\w/"),
    url.filter,
    stringr::regex("/\\w"),
    collapse = "|"
  )
  # Checking if art.source exists
  if (is.null(art.source)) {
    # Checking if strings are inclusion or exclusion
    if (exclude == FALSE) {
      # Inclusion
      df |>
        dplyr::left_join(source_table, by = source_table$art_source) |>
        dplyr::filter(
          short_source == short.source,
          stringr::str_detect(url, url.filter),
          stringr::str_detect(url, "page=", negate = TRUE)
        ) |>
        dplyr::collect() |>
        tidytable::distinct(url, .keep_all = TRUE)
    } else {
      # Exclusion
      df |>
        dplyr::left_join(source_table, by = source_table$art_source) |>
        dplyr::filter(
          short_source == short.source,
          stringr::str_detect(url, url.filter, negate = TRUE)
        ) |>
        dplyr::collect() |>
        tidytable::distinct(url, .keep_all = TRUE)
    }
    # If short.source is not used
  } else if (is.null(short.source)) {
    df |>
      dplyr::filter(
        art_source == art.source,
        stringr::str_detect(url, url.filter),
        stringr::str_detect(url, "page=", negate = TRUE)
      ) |>
      dplyr::collect() |>
      tidytable::distinct(url, .keep_all = TRUE)
  }
}

initial_helper <- function(.df, short.source = NULL, art.source = NULL) {
  if (is.null(art.source)) {
    .df |>
      dplyr::left_join(source_table, by = source_table$art_source) |>
      dplyr::filter(short_source == short.source) |>
      dplyr::collect()
  } else if (is.null(short.source)) {
    .df |>
      dplyr::filter(art_source == art.source) |>
      dplyr::collect()
  }
}

initial_look <- function(.df, short.source) {
  temp <- initial_helper(.df, short.source)
  urls <- tidytable::map_df(.x = temp$url, .f = xml2::url_parse)
  return(urls)
}

path_examination <- function(.df) {
  .df |>
    tidytable::separate_wider_delim(path, "/") |>
    tidytable::group_by(path2) |>
    tidytable::count(sort = T)
}
```

# Building SQL for Functions

# Printing Source Table for Reference

```{r}
source_table
```

# Link Exploration

```{r}
initial_look(sitemaps, "urban") |>
  path_examination()
```

# Disconnect

```{r}
#| label: Disconnect Block
dbDisconnect(pol_sent_db, shutdown = TRUE)
```