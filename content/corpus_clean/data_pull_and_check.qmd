---
title: "Data Check"
author: "Keenan Smith"
---

```{r}
here::i_am("content/corpus_clean/data_pull_and_check.qmd")
# source(here::here("R", "viable_links_original.R"))
library(DBI)
library(tidytable)

source(here::here("R", "sql_export_db.R"))
source(here::here("R", "sql_article_table_helpers.R"))
source(here::here("R", "sql_table_creation_helpers.R"))
```

```{r}
#| label: Connecting the DB
pol_sent_db <- dbConnect(duckdb::duckdb(), dbdir = here::here("data","political-sentiment.duckdb"))
pol_parquet_db <- dbConnect(duckdb::duckdb(), dbdir = here::here("data","pol-parquet.duckdb"))
```

```{r}
#| label: Importing Backup Database to Database
DBI::dbExecute(pol_sent_db, "IMPORT DATABASE 'C:/Users/slaps/OneDrive/Documents/Programming/political-sentiment/data/backup'")
```

# Export Main DB for Back Up

```{r}
export_statement <- export_db(here::here("data", "backup"), pol_sent_db)
DBI::dbExecute(pol_sent_db, export_statement)
```

# Export Scrape DB

```{r}
scrape_db_fab <- DBI::dbConnect(duckdb::duckdb(), dbdir = here::here("data","scrape_db","scrape_fab.duckdb"))


scrape_db_wilson <- DBI::dbConnect(duckdb::duckdb(), dbdir = here::here("data","scrape_db","scrape_wilson.duckdb"))

check_wilson <- dbGetQuery(scrape_db_wilson, "SELECT * FROM text_wilson")
dbDisconnect(scrape_db_wilson, shutdown = T)
```


```{r}
copy_statement <- export_db(here::here("data", "scrape_db"), scrape_db_wilson)
DBI::dbExecute(scrape_db_wilson, copy_statement)
```

# Copy Exported Data into Main DB

```{r}
copy_wilson <- copy_from_table("text_wilson", here::here("data", "scrape_db", "text_wilson.parquet"), pol_parquet_db)
DBI::dbExecute(pol_parquet_db, copy_wilson)
```

# Creating Table Function

Check to make sure that the table isn't already created

```{r}
table_create <- create_art_table("text_demos", pol_parquet_db)
DBI::dbExecute(pol_parquet_db, table_create)
```

# Importing Previously Collected Text Data

## Function Block

```{r}
corpus_concatenation <- function(df) {
  df |>
    tidytable::group_by(art_link,
             art_date,
             art_author,
             art_topic,
             art_title,
             art_source) |> # These are the metadata tags REFACTOR in future
    tidytable::summarize(full_text = paste(text, collapse = " "),
              .groups = "drop") # combining using the summarise function
}
```

## Loading Text Data

```{r}
text_jacobin <- readr::read_rds(here::here("data", "text", "text_jacobin.rds")) |> as_tidytable()
text_brookings <- readr::read_rds(here::here("data", "text", "text_brooking.rds")) |> as_tidytable()

text_jacobin <- text_jacobin |>
  select(-i)

text_brookings <- text_brookings |>
  select(-i)

# Combine Text into One Row, One Article
text_jacobin_combined <- corpus_concatenation(text_jacobin)
text_brookings_combined <- corpus_concatenation(text_brookings)

text_jacobin_combined <- text_jacobin_combined |>
  tibble::rowid_to_column() |>
  rename(pull_index = rowid) |>
  transmute(art_link, art_date, art_author, art_title, art_source, full_text, pull_index) |>
  relocate(pull_index, .after = full_text)

text_brookings_combined <- text_brookings_combined |>
  tibble::rowid_to_column() |>
  rename(pull_index = rowid) |>
  transmute(art_link, art_date, art_author, art_title, art_source, full_text, pull_index) |>
  relocate(pull_index, .after = full_text)

fwrite(text_jacobin_combined, here::here("data", "text", "text_jacobin.csv"))
fwrite(text_brookings_combined, here::here("data", "text", "text_brookings.csv"))

copy_jacob <- copy_table("text_jacob", here::here("data", "text", "text_jacobin.csv"), pol_sent_db)
copy_brook <- copy_table("text_brook", here::here("data", "text", "text_brookings.csv"), pol_sent_db)

DBI::dbExecute(pol_sent_db, copy_jacob)
DBI::dbExecute(pol_sent_db, copy_brook)
```

# Creating Unique Index on Link

Creating Indexes to Speed Up Data Queries

```{r}
index_table <- function(tbl_name, con) {
  index_statement <- glue::glue_sql("
                 CREATE UNIQUE INDEX {`tbl_name`}_idx ON {tbl_name} (art_link, art_source)",
    .con = con
  )
  DBI::dbSendStatement(conn = con, index_statement)
}

tables_idx <- dbListTables(pol_sent_db)[4:20]
```


```{r}
#| label: Creating Index on art_link

purrr::map(.x = tables_corpus, .f = index_table, con = pol_sent_db)
```

```{r}
DBI::dbDisconnect(scrape_db_wilson, shutdown = TRUE)
```


```{r}
# Disconnecting from DuckDB
DBI::dbDisconnect(pol_parquet_db, shutdown = TRUE)
DBI::dbDisconnect(pol_sent_db, shutdown = TRUE)
```