---
title: "LASSO NLP Modeling"
author: "Keenan Smith"
editor_options: 
  chunk_output_type: console
---

```{r}
#| output: false
#| label: Reading in initial Libraries
here::i_am("content/modeling/bigram_nlp_modeling_lasso_tfidf.qmd")
library(tidymodels)

library(parallel)
all_cores <- parallel::detectCores(logical = FALSE)
cl <- parallel::makePSOCKcluster(all_cores)

# Script to Ensure Data Reproducibility
source(here::here("R", "data_prep_modeling_tfidf.R"), echo = TRUE)
```

# Recipes

```{r}
sparse_bp <- hardhat::default_recipe_blueprint(composition = "dgCMatrix")

text_rec <- recipe(source_bias ~ ., data = bigram_train)
```

# Engine

```{r}
tune_spec <- logistic_reg(penalty = tune(), mixture = 1) |>
  set_mode("classification") |>
  set_engine("glmnet")
```

# Workflows

```{r}
tune_wf <- workflow() |>
  add_recipe(text_rec, blueprint = sparse_bp) |>
  add_model(tune_spec)
```

# Tune Grid

```{r}
lambda_grid <- grid_regular(penalty(), levels = 10)
```

# Metric Set

```{r}
class_metrics <- metric_set(sens, spec, recall, precision, f_meas, accuracy, roc_auc, pr_auc)
```

# Hyperparameter Tuning

```{r}
doParallel::registerDoParallel(cl)
tune_rs <- tune_grid(
  tune_wf,
  bigram_folds,
  grid = lambda_grid,
  metrics = class_metrics
)

readr::write_rds(tune_rs, here::here("content","modeling", "model_results", "tune_results_lasso_tfidf.rds"), compress = "gz")
parallel::stopCluster(cl)
```

# Hyperparameter Metrics

```{r}
lasso_rs_metrics <- collect_metrics(tune_rs)
tidytable::fwrite(lasso_rs_metrics, here::here("content", "modeling", "model_results", "lasso_rs_metrics_tfidf_bigrams_4k.csv"))

lasso_rs_metrics
```

## Metric vs. Lambda

```{r}
autoplot(tune_rs) +
  labs(
    title = "Lasso model performance across regularization penalties",
    subtitle = "Performance metrics can be used to identity the best penalty"
  )
ggsave(here::here("content", "modeling", "plots", "cv_metrics_lasso_tfidf.png"))
```

# Selecting Best ROC-AUC to tune Model

```{r}
chosen_auc <- tune_rs |>
  select_best(metric = "roc_auc")

final_lasso <- finalize_workflow(tune_wf, chosen_auc)
```

# Fitting Model on Training Data

```{r}
fitted_lasso <- fit(final_lasso, bigram_train)
```

# Variable Importance Examination

```{r}
lasso_variables <- fitted_lasso |>
  extract_fit_parsnip() |>
  tidy() |>
  arrange(-estimate)

tidytable::fwrite(lasso_variables, here::here("content", "modeling", "model_results", "lasso_variables_tfidf_final_run_4k.csv"))

lasso_variables
```

```{r}
fitted_lasso |>
  extract_fit_parsnip() |>
  tidy() |>
  arrange(estimate)
```

## Variable Importance Plot

```{r}
library(vip)

vip_lasso <- fitted_lasso |>
  extract_fit_parsnip() |>
  vi() |>
  mutate(
    Importance = abs(Importance),
    Variable = forcats::fct_reorder(Variable, Importance)
  )

vip_lasso |>
  slice_head(n = 20) |>
  ggplot(aes(x = Importance, y = Variable, fill = Sign)) +
  geom_col() +
  scale_x_continuous(expand = c(0, 0)) +
  scale_fill_manual(values = c("NEG" = "blue",
                              "POS" = "red")) +
  labs(y = NULL)

ggsave(here::here("content", "modeling", "plots", "variable_importance_plot_lasso_tfidf.png"))
```

```{r}
last_fit_lasso <- last_fit(final_lasso, tfidf_split)

lasso_metric <- last_fit_lasso |>
  collect_predictions() |>
  class_metrics(source_bias, estimate = .pred_class, `.pred_left-wing`)

tidytable::fwrite(lasso_metric, here::here("content","modeling", "model_results", "lasso_test_metrics_tfidf.csv"))

last_fit_lasso |>
  collect_predictions() |>
  roc_curve(source_bias, `.pred_left-wing`) |>
  autoplot()

ggsave(here::here("content", "modeling", "plots", "roc_curve_lasso_tfidf.png"))

last_fit_lasso |>
  collect_predictions() |>
  conf_mat(source_bias, .pred_class) |>
  autoplot(type = "heatmap")

ggsave(here::here("content", "modeling", "plots", "confusion_matrix_lasso_tfidf.png"))
```

