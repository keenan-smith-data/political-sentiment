---
title: "Classical NLP Modeling"
author: "Keenan Smith"
---

```{r}
#| output: false
#| label: Reading in initial Libraries
here::i_am("content/modeling/classical_nlp_modeling.qmd")
library(tidytable)

library(parallel)
all_cores <- parallel::detectCores(logical = FALSE)
cl <- parallel::makePSOCKcluster(all_cores)
doParallel::registerDoParallel(cl)
```

```{r}
word_freq_df <- fread(here::here("data", "model_data", "word_df.csv.gz"))
word_tfidf_df <- fread(here::here("data", "model_data", "tfidf_word_df.csv.gz"))
bigram_freq_df <- fread(here::here("data", "model_data", "bigram_df.csv.gz"))
bigram_tfidf_df <- fread(here::here("data", "model_data", "tfidf_word_df.csv.gz"))
```
# Getting Classification out of Doc ID

```{r}
docid_to_bias <- function(df) {
  df |>
    tidytable::separate_wider_delim(document, delim = "_", names = c("short_source", "pull_index", "source_bias"), cols_remove = TRUE) |>
    tidytable::select(-short_source, -pull_index)
}
```


# Engines

```{r}
library(discrim)
nb_spec <- naive_Bayes() %>%
  set_mode("classification") %>%
  set_engine("naivebayes")

nb_spec
```



# Recipes

```{r}
rec <- recipe(source_bias ~ *, data = corpus_df)
```

# Workflows

```{r}
complaint_wf <- workflow() %>%
  add_recipe(complaints_rec)
```


